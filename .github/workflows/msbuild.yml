name: MSBuild

on:
  workflow_dispatch:
  push:
    branches:
      - "main"

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .
  # Define the artifact name for consistency
  ARTIFACT_NAME: edid-decode

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v2

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: |
        msbuild /m /p:Configuration=Release /p:platform=x64 ${{env.SOLUTION_FILE_PATH}}
        msbuild /m /p:Configuration=Release /p:platform=x86 ${{env.SOLUTION_FILE_PATH}}

    - name: Stage artifacts for packaging
      run: |
        $executables = "edid-decode.exe"
        $platformMap = @{
            "x64/Release"   = "build/x64"
            "Win32/Release" = "build/x86"
        }
        $platformMap.Values | ForEach-Object { New-Item -Path $_ -ItemType Directory -Force }
        foreach ($entry in $platformMap.GetEnumerator()) {
            Move-Item -Path "$($entry.Name)/${{ env.ARTIFACT_NAME }}.exe" -Destination "$($entry.Value)/"
        }
        Copy-Item -Path "LICENSE" -Destination "build/LICENSE"

    - name: Create ZIP Archive
      run: Compress-Archive -Path build/* -DestinationPath "${{ env.ARTIFACT_NAME }}.zip"

    - name: Generate Release Notes
      id: generate_notes
      run: |
        $changelogLines = New-Object System.Collections.Generic.List[string]
        if ("${{ github.event_name }}" -eq "push") {
          Write-Host "Generating changelog from push event payload"
          # The JSON payload must be piped to ConvertFrom-Json
          $commits = '${{ toJSON(github.event.commits) }}' | ConvertFrom-Json
          if ($null -ne $commits) {
            foreach ($commit in $commits) {
              $shortSha = $commit.id.Substring(0, 7)
              # Take only the first line of the commit message
              $commitMessage = ($commit.message -split "`r?`n")[0]
              $changelogLines.Add("* $commitMessage ($shortSha) by @$($commit.author.name)")
            }
          }
        }
        else {
          Write-Host "Generating changelog for workflow_dispatch event (latest commit)"
          $latest_commit = git log --pretty=format:'* %s (%h) by @%an' -n 1
          $changelogLines.Add($latest_commit)
        }

        $changelogBody = $changelogLines -join "`n"
        if ([string]::IsNullOrWhiteSpace($changelogBody)) {
          $changelogBody = "No new commits in this push. Automated build from commit ${{ github.sha }}."
        }

        # Use a secure way to create a multi-line environment variable
        $delimiter = "RELEASE_NOTES_$(Get-Random)"
        "CHANGELOG_BODY<<$delimiter" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        $changelogBody | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "$delimiter" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Delete old release
      continue-on-error: true
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        gh release delete latest --cleanup-tag --yes
      env:
        GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

    - name: Create new release
      run: |
        $date_version = (Get-Date -Format 'yyyyMMdd') + ".${{ github.run_number }}"
        gh release create latest "${{ env.ARTIFACT_NAME }}.zip" `
          --latest `
          --title "Build $date_version" `
          --notes "${{ env.CHANGELOG_BODY }}"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
